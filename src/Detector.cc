#include "detector.hh"

MySensitiveDetector::MySensitiveDetector(G4String name) : G4VSensitiveDetector(name)
{
    N_Tritium = 0;
}

MySensitiveDetector::~MySensitiveDetector()
{}


// This method is used to COUNT the number of Tritium breeding reactions
// occurred. It does so by observing each particle: if it is a triton
// (tritium nucleus) and if ti was generated by a "neutronInelastic"
// process then a counter N_Tritium is increased.
G4bool MySensitiveDetector::ProcessHits(G4Step* aStep, G4TouchableHistory* ROhist)
{    
    
    G4String particle_name = aStep->GetTrack()->GetParticleDefinition()->GetParticleName();
    
    // Track of the current particle
    G4Track* track = aStep->GetTrack();
    
    // G4AnalysisManager* man = G4AnalysisManager::Instance();
    
    if(particle_name == "triton") {
        
        G4String creator_process = track->GetCreatorProcess()->GetProcessName();
        
        if(creator_process == "neutronInelastic") {
            
            ++N_Tritium;
            
            // G4double E = track->GetTotalEnergy();
            // man->FillNtupleDColumn(0, E);
            // man->AddNtupleRow(0);
            
            // Kill the track: it's no longer useful because we've
            // already detected the Tritium breeding.
            track->SetTrackStatus(fStopAndKill);
            
            std::cout << "N Tritium: " << N_Tritium << '\n';
            
        }
        
    } /*else if(particle_name != "neutron") {
        
        // Kill unnecessary tracks to save computing time
        track->SetTrackStatus(fStopAndKill);
    }*/
    
    
    return true;
}
